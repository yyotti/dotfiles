scriptencoding utf-8

"-----------------------------------------------------------------------------
" Initialize:
"

if &compatible
  set nocompatible
endif

function! s:source_rc(path) abort
  execute 'source' fnameescape(RcDir() . '/' . a:path)
endfunction

let s:is_windows = has('win16') || has('win32') || has('win64')
let s:is_cygwin = has('win32unix')
let s:rc_path = resolve(expand('~/.vim/rc'))

let s:vimdev_dir = resolve(expand('~/vim_dev/'))
let s:vimrc_local = resolve(expand('~/.vimrc_local'))

function! IsWindows() abort
  return s:is_windows
endfunction

function! IsPowerlineEnabled() abort
  let enable_python = has('python') && executable('python')
  let enable_python3 = has('python3') && executable('python3')
  return (enable_python || enable_python3) && executable("powerline-daemon")
endfunction

function! RcDir() abort
  return s:rc_path
endfunction

function! IsHomePC() abort
  return isdirectory(s:vimdev_dir)
endfunction

call s:source_rc('init.vim')

" 必須
call neobundle#begin(expand('$CACHE/neobundle'))

" NeoBundle
if neobundle#load_cache(
      \   expand('<sfile>'),
      \   RcDir() . '/neobundle.toml',
      \   RcDir() . '/neobundle_lazy.toml'
      \ )
  NeoBundleFetch 'Shougo/neobundle.vim'

  " プラグイン設定をロードする
  " TODO サーバ用と家PC用とで分ける
  call neobundle#load_toml(RcDir() . '/neobundle.toml')
  call neobundle#load_toml(
        \   RcDir() . '/neobundle_lazy.toml',
        \   { 'lazy': 1 }
        \ )

  if IsHomePC()
    " 開発用設定をロードする
    " tomlファイルに公開版の設定が入っていても、こちらで開発版に上書きすることが
    " できる。
    call neobundle#local(
          \   s:vimdev_dir,
          \   { 'type': 'none' },
          \   [ 'vim*', 'unite-*', '*.vim', 'neosnippet-additional' ]
          \ )
  endif

  NeoBundleSaveCache
endif

" プラグインごとの設定
call s:source_rc('plugins.vim')

call neobundle#end()

" 必須
filetype plugin indent on

" syntax colorを有効にする
syntax enable

" インストールチェック
if !has('vim_starting')
  NeoBundleCheck
endif

"-----------------------------------------------------------------------------
" Encoding:
"
call s:source_rc('encoding.vim')

"-----------------------------------------------------------------------------
" Search:
"
call s:source_rc('search.vim')

"-----------------------------------------------------------------------------
" Edit:
"
call s:source_rc('edit.vim')

"-----------------------------------------------------------------------------
" View:
"
call s:source_rc('view.vim')

"-----------------------------------------------------------------------------
" FileType:
"
call s:source_rc('filetype.vim')

"-----------------------------------------------------------------------------
" Mappings:
"
call s:source_rc('mappings.vim')

"-----------------------------------------------------------------------------
" GUI:
"
if has('gui_running')
  call s:source_rc('gui.vim')
endif

"-----------------------------------------------------------------------------
" Powerline:
"
call s:source_rc('powerline.vim')

"-----------------------------------------------------------------------------
" Colorscheme:
"
call s:source_rc('colorscheme.vim')

" 問題がない限り、やったほうがいいらしい
set secure

"-----------------------------------------------------------------------------
" Local Settings:
"
if filereadable(s:vimrc_local)
  execute 'source' s:vimrc_local
endif

" vim:set foldmethod=marker:
