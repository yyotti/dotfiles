[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'w0ng/vim-hybrid'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'cakebaker/scss-syntax.vim'

[[plugins]]
repo = 'rcmdnk/vim-markdown'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet.vim'  # TODO lazy
on_ft = 'snippet'
depends = [ 'neosnippet-snippets', 'context_filetype.vim' ]
hook_add = '''
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#enable_completed_snippet = 1
let g:neosnippet#expand_word_boundary = 1

let g:neosnippet#snippets_directory = vimrc#join_path($VIMDIR, 'snippets')

imap <silent> <C-k> <Plug>(neosnippet_jump_or_expand)
smap <silent> <C-k> <Plug>(neosnippet_jump_or_expand)
xmap <silent> <C-k> <Plug>(neosnippet_expand_target)
imap <silent> <C-l> <Plug>(neosnippet_expand_or_jump)
smap <silent> <C-l> <Plug>(neosnippet_expand_or_jump)
xmap <silent> o <Plug>(neosnippet_register_oneshot_snippet)
'''

[[plugins]]
repo = 'PProvost/vim-ps1'

[[plugins]]
repo = 'blueyed/smarty.vim'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'
hook_add = '''
let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]]
repo = 'othree/yajs.vim'

[[plugins]]
repo = 'pangloss/vim-javascript'

[[plugins]]
repo = 'MaxMEllon/vim-jsx-pretty'
depends = 'yajs.vim'
hook_add = '''
let g:vim_jsx_pretty_colorful_config = 1
'''

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
depends = 'async.vim'
hook_add = '''
let g:lsp_diagnostics_enabled = 0

let s:lsp_filetypes = []
if executable('pyls')
  autocmd MyAutocmd User lsp_setup call lsp#register_server({
        \   'name': 'pyls',
        \   'cmd': { server_info -> [ 'pyls' ] },
        \   'whitelist': [ 'python' ],
        \   'priority': 5,
        \ })
  call add(s:lsp_filetypes, 'python')
endif

if executable('bingo')
  autocmd MyAutocmd User lsp_setup call lsp#register_server({
        \   'name': 'bingo',
        \   'cmd': { server_info -> [ 'bingo', '-mode', 'stdio' ] },
        \   'whitelist': [ 'go' ],
        \   'priority': 5,
        \ })
  call add(s:lsp_filetypes, 'go')
endif

" if executable('javascript-typescript-stdio')
"   let g:LanguageClient_serverCommands.javascript = [ 'javascript-typescript-stdio' ]
"   let g:LanguageClient_serverCommands.typescript = [ 'javascript-typescript-stdio' ]
"
"   let g:LanguageClient_rootMarkers.javascript = [ '.git', 'package.json' ]
"   let g:LanguageClient_rootMarkers.typescript = [ '.git', 'package.json' ]
" endif

if executable('node') &&
      \ filereadable(expand('$XDG_DATA_HOME/yarn/global/node_modules/intelephense/lib/intelephense.js'))
  let s:php_language_server = expand('$XDG_DATA_HOME/yarn/global/node_modules/intelephense/lib/intelephense.js')
  autocmd MyAutocmd User lsp_setup call lsp#register_server({
        \   'name': 'intelephense',
        \   'cmd': { server_info -> [ 'node', s:php_language_server, '--stdio' ] },
        \   'initialization_options': { 'storagePath': '/tmp/intelephense' },
        \   'whitelist': [ 'php' ],
        \   'priority': 5,
        \ })
  call add(s:lsp_filetypes, 'php')
endif

if len(s:lsp_filetypes) > 0
  execute 'autocmd MyAutocmd Filetype' join(s:lsp_filetypes, ',')
        \ 'call s:lsp_mappings()'
  function! s:lsp_mappings() abort "{{{
    nmap <buffer> <LocalLeader>r <Plug>(lsp-rename)
    nmap <buffer> <LocalLeader>f <Plug>(lsp-document-format)
  endfunction "}}}
endif
'''

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'ncm2/ncm2'
depends = [ 'nvim-yarp' ]
hook_add = '''
let g:ncm2#auto_popup = 1
autocmd MyAutocmd BufEnter *
      \ silent if !dein#check_install('ncm2')
      \|  call ncm2#enable_for_buffer()
      \|endif

inoremap <expr> <nowait> <CR> (pumvisible() ? "\<C-y>\<CR>" : "\<CR>")
'''

[[plugins]]
repo = 'ncm2/ncm2-bufword'
depends = [ 'ncm2' ]

[[plugins]]
repo = 'ncm2/ncm2-path'
depends = [ 'ncm2' ]

[[plugins]]
repo = 'ncm2/ncm2-vim-lsp'
depends = [ 'ncm2', 'vim-lsp' ]

[[plugins]]
repo = 'ncm2/ncm2-neosnippet'
depends = [ 'ncm2', 'neosnippet.vim' ]

[[plugins]]
repo = 'ncm2/ncm2-vim'
depends = [ 'ncm2', 'neco-vim' ]
