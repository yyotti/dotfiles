hook_add = '''
" Vim
let g:vimsyntax_noerror = 1

" Bash
let g:is_bash = 1

" python.vim
let g:python_highlight_all = 1

" markdown colors
" http://mattn.kaoriya.net/software/vim/20140523124903.htm
let g:markdown_fenced_languages = [
      \   'css',
      \   'javascript',
      \   'js=javascript',
      \   'json=javascript',
      \   'xml',
      \   'vim',
      \   'php',
      \ ]

" Folding
let g:xml_syntax_folding = 1

" Disable PHP formatoptions
let g:PHP_autoformatcomment = 0

" Update filetype
autocmd MyAutocmd BufWritePost * nested
      \ if &l:filetype ==# '' || exists('b:ftdetect') |
      \   unlet! b:ftdetect |
      \   filetype detect |
      \ endif

" " Auto reload *.vim files
" autocmd MyAutocmd BufWritePost .vimrc,vimrc,*.rc.vim,vimrc.local nested
"       \ source $MYVIMRC | redraw

" Auto reload VimScript
" autocmd MyAutocmd BufWritePost,FileWritePost *.vim nested
"       \ if &l:autoread > 0 |
"       \   source <afile> |
"       \   echo 'source ' . bufname('%') |
"       \ endif

" Highlight whitespaces (EOL)
highlight default link WhitespaceEOL Error
match WhitespaceEOL /\s\+$/
'''

[ftplugin]
_ = '''
" Disable automatically insert comment
setlocal formatoptions-=ro
setlocal formatoptions+=mMBl

" Disable auto wrap
if &l:textwidth != 70 && &filetype !=# 'help'
  setlocal textwidth=0
endif

" Use FoldCCtext()
if &filetype !=# 'help' && exists('*FoldCCtext')
  setlocal foldtext=FoldCCtext()
endif

if !&l:modifiable
  setlocal nofoldenable
  setlocal foldcolumn=0
  setlocal colorcolumn=
endif
'''

blade = '''
let b:caw_wrap_oneline_comment = [ '{{--', '--}}' ]
'''

css = '''
setlocal iskeyword+=-
setlocal iskeyword-=#
'''

go = '''
setlocal tabstop=4

let b:del_last_whitespaces = 0

if dein#tap('vim-go')
  nnoremap <silent> <buffer> <LocalLeader>t :<C-u>GoTest<CR>
  nnoremap <silent> <buffer> <LocalLeader>r :<C-u>GoRename<CR>
  nnoremap          <buffer> <LocalLeader>i :<C-u>GoImport
  nnoremap <silent> <buffer> <LocalLeader>I :<C-u>GoImports<CR>
  nnoremap <silent> <buffer> gt :call go#alternate#Switch(0, 'vsplit')<CR>
  nnoremap <silent> <buffer> gT :call go#alternate#Switch(0, 'split')<CR>
  nnoremap <silent> <buffer> <LocalLeader>h :<C-u>GoSameIds<CR>
  nnoremap <silent> <buffer> <LocalLeader>H :<C-u>GoSameIdsClear<CR>
endif

" highlight variable 'err'
highlight default link goErr WarningMsg
syntax match goErr /\<err\>/
'''

godoc = '''
nnoremap <silent> <buffer> q :q<CR>
'''

haskell = '''
setlocal shiftwidth=2
setlocal expandtab
'''

help = '''
setlocal iskeyword+=:
setlocal iskeyword+=#
setlocal iskeyword+=-

nnoremap <silent> <buffer> q :q<CR>
'''

markdown = '''
let b:del_last_whitespaces = 0

setlocal colorcolumn=
setlocal wrap
'''

php = '''
setlocal colorcolumn=
setlocal nowrap

if dein#tap('vim-php-refactoring-toolbox')
  nnoremap <buffer> <silent> rflv :call PhpRenameLocalVariable()<CR>
  nnoremap <buffer> <silent> rfcv :call PhpRenameClassVariable()<CR>
  nnoremap <buffer> <silent> rfrm :call PhpRenameMethod()<CR>
  nnoremap <buffer> <silent> rfdu :call PhpDetectUnusedUseStatements()<CR>
  nnoremap <buffer> <silent> rfec :call PhpExtractClassProperty()<CR>
  nnoremap <buffer> <silent> rfeu :call PhpExtractUse()<CR>

  vnoremap <buffer> <silent> rfem :call PhpExtractMethod()<CR>
  vnoremap <buffer> <silent> <Leader>== :call PhpAlignAssigns()<CR>
endif
'''

python = '''
setlocal foldmethod=indent
setlocal softtabstop=4
setlocal shiftwidth=4
setlocal textwidth=80
setlocal smarttab
setlocal expandtab
setlocal nosmartindent

if dein#tap('jedi-vim')
  setlocal omnifunc=jedi#completions

  function! JediRename() abort "{{{
    normal! zn
    call jedi#rename()
  endfunction "}}}

  " mappings
  nnoremap <silent> <buffer> <LocalLeader>g
        \ :<C-u>call jedi#goto()<CR>
  nnoremap <silent> <buffer> <LocalLeader>a
        \ :<C-u>call jedi#goto_assignments()<CR>
  nnoremap <silent> <buffer> <LocalLeader>d
        \ :<C-u>call jedi#goto_definitions()<CR>
  nnoremap <silent> <buffer> <LocalLeader>r
        \ :<C-u>call JediRename()<CR>
  nnoremap <silent> <buffer> <LocalLeader>i
        \ :<C-u>call SortImports()<CR>

  " sort imports
  function! SortImports() abort "{{{
    if !&l:modified
      return
    endif

    let l:start = 0
    let l:end = 0

    let l:lineno = 0
    for l:line in getbufline(bufnr('%'), 1, '$')
      let l:lineno += 1
      if l:line =~# '^import ' && l:start <= 0
        let l:start = l:lineno
      elseif l:line !~# '^import ' && l:start > 0
        let l:end = l:lineno - 1
        break
      endif
    endfor
    if l:start > 0 && l:end == 0
      let l:end = l:lineno
    endif

    if l:start > 0 && l:end > 0 && l:start <= l:end
      let l:pos = getpos('.')

      let l:cmd = printf('%d,%dsort', l:start, l:end)
      execute l:cmd

      call setpos('.', l:pos)
      unlet l:pos
    endif
  endfunction "}}}
endif
'''

qf = '''
nnoremap <silent> <buffer> q :q<CR>
'''

scss = '''
setlocal shiftwidth=2
setlocal iskeyword+=-
'''

sh = '''
setlocal shiftwidth=2
'''

smarty = '''
setlocal colorcolumn=
setlocal nowrap
'''

vim = '''
setlocal shiftwidth=2
setlocal softtabstop=2

setlocal iskeyword+=:,#

let &l:path = join(
      \   map(split(&runtimepath, ','), { _, p -> p . '/autoload' }), ','
      \ )

setlocal suffixesadd=.vim
setlocal includeexpr=fnamemodify(substitute(v:fname,'#','/','g'),':h')
'''

zsh = '''
setlocal shiftwidth=2
setlocal tabstop=2
'''
