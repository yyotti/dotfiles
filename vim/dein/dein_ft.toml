hook_add = '''
  " Vim
  let g:vimsyntax_noerror = 1

  " Bash
  let g:is_bash = 1

  " python.vim
  let g:python_highlight_all = 1

  " markdown colors
  " http://mattn.kaoriya.net/software/vim/20140523124903.htm
  let g:markdown_fenced_languages = [
        \   'css',
        \   'javascript',
        \   'js=javascript',
        \   'json=javascript',
        \   'xml',
        \   'vim',
        \   'php',
        \ ]

  " Folding
  let g:xml_syntax_folding = 1

  " Disable PHP formatoptions
  let g:PHP_autoformatcomment = 0

  " Update filetype
  autocmd MyAutocmd BufWritePost * nested
        \ if &l:filetype ==# '' || exists('b:ftdetect') |
        \   unlet! b:ftdetect |
        \   filetype detect |
        \ endif

  " Auto reload *.vim files
  autocmd MyAutocmd BufWritePost .vimrc,vimrc,*.rc.vim,.vimrc_local nested
        \ source $MYVIMRC | redraw

  " Auto reload VimScript
  autocmd MyAutocmd BufWritePost,FileWritePost *.vim nested
        \ if &l:autoread > 0 |
        \   source <afile> |
        \   echo 'source ' . bufname('%') |
        \ endif
'''

[ftplugin]
_ = '''
  " Disable automatically insert comment
  setlocal formatoptions-=ro
  setlocal formatoptions+=mMBl

  " Disable auto wrap
  if &l:textwidth != 70 && &filetype !=# 'help'
    setlocal textwidth=0
  endif

  " Use foldCCtext()
  if &filetype !=# 'help' && exists('*FoldCCtext')
    setlocal foldtext=FoldCCtext()
  endif

  if !&l:modifiable
    setlocal nofoldenable
    setlocal foldcolumn=0

    if v:version >= 703
      setlocal colorcolumn=
    endif
  endif
'''

blade = '''
  let b:caw_wrap_oneline_comment = [ '{{--', '--}}' ]
'''

css = '''
  setlocal iskeyword+=-
  setlocal iskeyword-=#
'''

go = '''
  highlight default link goErr WarningMsg
  match goErr /\<err\>/

  let b:not_del_last_whitespaces = 1

  setlocal tabstop=4
'''

help = '''
  setlocal iskeyword+=:
  setlocal iskeyword+=#
  setlocal iskeyword+=-

  nnoremap <silent> <buffer> q :q<CR>
'''

markdown = '''
  let b:not_del_last_whitespaces = 1

  setlocal colorcolumn=
  setlocal wrap
'''

php = '''
  setlocal colorcolumn=
  setlocal nowrap
'''

python = '''
  setlocal foldmethod=indent
  setlocal textwidth=80
  setlocal smarttab
  setlocal expandtab
  setlocal nosmartindent

  if dein#tap('jedi-vim')
    setlocal omnifunc=jedi#completions

    function! JediRename() abort "{{{
      normal! zn
      call jedi#rename()
    endfunction "}}}

    " mappings
    nnoremap <silent> <buffer> <LocalLeader>g
          \ :<C-u>call jedi#goto()<CR>
    nnoremap <silent> <buffer> <LocalLeader>a
          \ :<C-u>call jedi#goto_assignments()<CR>
    nnoremap <silent> <buffer> <LocalLeader>d
          \ :<C-u>call jedi#goto_definitions()<CR>
    nnoremap <silent> <buffer> <LocalLeader>r
          \ :<C-u>call JediRename()<CR>

    " sort imports
    function! SortImports() abort "{{{
      if !&l:modified
        return
      endif

      let start = 0
      let end = 0

      let lineno = 0
      for line in getbufline(bufnr('%'), 1, '$')
        let lineno += 1
        if line =~# '^import ' && start <= 0
          let start = lineno
        elseif line !~# '^import ' && start > 0
          let end = lineno - 1
          break
        endif
      endfor
      if start > 0 && end == 0
        let end = lineno
      endif

      if start > 0 && end > 0 && start <= end
        let pos = getpos('.')

        let cmd = printf('%d,%dsort', start, end)
        execute cmd

        call setpos('.', pos)
        unlet pos
      endif
    endfunction "}}}

    autocmd! MyAutocmd BufWritePre <buffer> call SortImports()
  endif
'''

qf = '''
  nnoremap <silent> <buffer> q :q<CR>
'''

scss = '''
  setlocal shiftwidth=2
  setlocal iskeyword+=-
'''

sh = '''
  setlocal shiftwidth=2
'''

smarty = '''
  setlocal colorcolumn=
  setlocal nowrap
'''

vim = '''
  setlocal shiftwidth=2
  setlocal softtabstop=2

  setlocal iskeyword+=:,#

  let &l:path = join(
        \   map(split(&runtimepath, ','), { _, p -> p . '/autoload' }), ','
        \ )

  setlocal suffixesadd=.vim
  setlocal includeexpr=fnamemodify(substitute(v:fname,'#','/','g'),':h')
'''

zsh = '''
  setlocal shiftwidth=2
  setlocal tabstop=2
'''
