scriptencoding utf-8
" vim:set ts=8 sts=2 sw=2 tw=0 expandtab foldmethod=marker:

" プラグイン管理 {{{

" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

" NeoBundle {{{
if has('vim_starting')
  if &compatible
    set nocompatible
  endif

  " neobundle をインストールしていなければ自動でインストール
  if !isdirectory(expand('~/.vim/bundle/neobundle.vim/'))
    echo 'install neobundle...'
    call system('curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh | sh')
  endif

  " 必須
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" 必須
call neobundle#begin(expand('~/.vim/bundle/'))

" NeoBundleをNeoBundleで管理する
" 必須
NeoBundleFetch 'Shougo/neobundle.vim'

" }}}

" My Bundles here:
" Refer to |:NeoBundle-examples|.
" Note: You don't set neobundle setting in .gvimrc!

" vimproc {{{
if has('unix')
  " vimprocは香り屋版にバンドルされているので、Winでは不要
  " Linuxで必要になるなら有効にする
  " インストール後、自動的にビルドされる
  " ※has('unix')してるくせにその他の環境まで書いてあるのはご愛嬌
  NeoBundle 'Shougo/vimproc', {
        \   'build' : {
        \     'windows' : 'tools\\update-dll-mingw',
        \     'cygwin' : 'make -f make_cygwin.mak',
        \     'mac' : 'make -f make_mak.mak',
        \     'linux' : 'make',
        \     'unix' : 'gmake',
        \   },
        \ }
endif
" }}}

" Lazyしないプラグイン {{{
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-repeat', {
      \   'depends' : ['tpope/vim-surround'],
      \ }
" ※fugitiveも遅延ロードしたかったが、autocmdを多用しているので無理らしい
NeoBundle 'tpope/vim-fugitive'
" ※fugitiveとvim-merginalが遅延ロードできないので、ついでにこいつも遅延ロードしない
NeoBundle 'cohama/agit.vim', {
      \   'depends' : ['tpope/vim-fugitive'],
      \ }
" ※vim-merginalもautocmdを使っているので遅延ロードできない
NeoBundle 'idanarye/vim-merginal', {
      \   'depends' : ['tpope/vim-fugitive'],
      \ }
NeoBundle 'tyru/eskk.vim'
NeoBundle 'lambdalisue/vim-unified-diff'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'osyo-manga/vim-textobj-multiblock', {
      \   'depends' : 'kana/vim-textobj-user',
      \ }
NeoBundle 'itchyny/lightline.vim'
" ※Git関係は遅延ロードしない方向で統一しておく
NeoBundle 'airblade/vim-gitgutter'
" }}}

" Lazy {{{
NeoBundleLazy 'Shougo/unite.vim', {
      \   'depends' : ['Shougo/vimproc'],
      \ }
NeoBundleLazy 'Shougo/vimfiler', {
      \   'depends' : ['Shougo/unite.vim'],
      \ }
" ※Uniteから分離したらしい
NeoBundleLazy 'Shougo/neomru.vim', {
      \   'depends' : ['Shougo/unite.vim'],
      \}
NeoBundleLazy 'Shougo/neocomplete.vim', {
      \   'depends' : ['Shougo/vimproc'],
      \ }
NeoBundleLazy 'Shougo/neosnippet.vim'
NeoBundleLazy 'Shougo/neosnippet-snippets', {
      \   'depends' : ['Shougo/neosnippet.vim'],
      \ }
NeoBundleLazy 'git@github.com:YosukeTsutsui/neosnippet-additional.git', {
      \   'depends' : ['Shougo/neosnippet.vim'],
      \ }
NeoBundleLazy 'Shougo/vimshell', {
      \   'depends' : ['Shougo/vimproc'],
      \ }
NeoBundleLazy 'LeafCage/nebula.vim'
NeoBundleLazy 'derekwyatt/vim-scala'
NeoBundleLazy 'groenewege/vim-less'
NeoBundleLazy 'kchmck/vim-coffee-script'
NeoBundleLazy 'osyo-manga/vim-watchdogs', {
      \   'depends' : [
      \     'thinca/vim-quickrun',
      \     'Shougo/vimproc',
      \     'osyo-manga/shabadou.vim',
      \   ],
      \ }
NeoBundleLazy 'KazuakiM/vim-qfsigns', {
      \   'depends' : ['osyo-manga/vim-watchdogs'],
      \ }
NeoBundleLazy 'KazuakiM/vim-qfstatusline', {
      \   'depends' : ['osyo-manga/vim-watchdogs'],
      \ }
NeoBundleLazy 'tyru/restart.vim'
NeoBundleLazy 'syngan/vim-vimlint', {
      \   'depends' : [
      \     'ynkdir/vim-vimlparser',
      \     'osyo-manga/vim-watchdogs',
      \   ],
      \ }
NeoBundleLazy 'ujihisa/unite-colorscheme', {
      \   'depends' : ['Shougo/unite.vim']
      \ }
NeoBundleLazy 'tsukkee/unite-tag', {
      \ 'depends' : [
      \     'Shougo/unite.vim',
      \     'Shougo/neocomplete.vim',
      \   ]
      \ }
" }}}

" NeoBundle管理以外 {{{
runtime macros/matchit.vim
" }}}

" 試験的に導入するプラグイン {{{

" -------- " -- scala-vim-snippets
" -------- NeoBundle 'tommorris/scala-vim-snippets'

" -- html5
" オムニ補完で問題が起こるぽいのでいったん削除
"   →直ったらしいので再度導入を検討する
" NeoBundle 'taichouchou2/html5.vim'

" }}}

call neobundle#end()

" 必須!!
filetype plugin indent on

" インストールチェック
NeoBundleCheck

" }}}

" 各プラグインの設定 {{{

" キーマッピングのためのprefix定義
nnoremap [unite] <Nop>
nmap <Leader>u [unite]
nnoremap [vimfiler] <Nop>
nmap <Leader>f [vimfiler]
nnoremap [git] <Nop>
nmap <Leader>g [git]
nnoremap [nebula] <Nop>
nmap <Leader>n [nebula]

" Unite {{{
if neobundle#tap('unite.vim')
  " config {{{
  call neobundle#config({
        \   'autoload' : {
        \     'commands' : [
        \       {
        \         'name' : 'Unite',
        \         'complete' : 'customlist,unite#complete_source'
        \       },
        \     ]
        \   }
        \ })
  " }}}

  " on_source {{{
  function! neobundle#tapped.hooks.on_source(bundle) abort
    if neobundle#is_sourced(a:bundle.name)
      " デフォルトアクションを書き換える
      call unite#custom_default_action('directory', 'vimfiler')
    endif
  endfunction
  " }}}

  " settings {{{
  " insertモードで起動する
  let g:unite_enable_start_insert=1
  " yank/deleteの履歴を有効にする
  let g:unite_source_history_yank_enable=1
  " ファイル履歴のMAX
  let g:unite_source_file_mru_limit=200
  " }}}

  " キーマッピング {{{
  " ※ここで定義しているのは、Uniteが標準でもっているsourceのみ
  " バッファ一覧を開く
  nnoremap <silent> [unite]b :Unite buffer<CR>
  " 同一ディレクトリ内のファイル一覧を出す
  nnoremap <silent> [unite]f :UniteWithBufferDir -buffer-name=files file<CR>
  " Unite-grep
  nnoremap <silent> [unite]g :Unite grep -buffer-name=grep<CR>
  nnoremap <silent> [unite]r :<C-u>UniteResume grep<CR>
  " ヤンク
  nnoremap <silent> [unite]y :<C-u>Unite history/yank<CR>
  " ブックマーク一覧
  nnoremap <silent> [unite]m :<C-u>Unite bookmark<CR>
  " バッファ内で行を検索
  nnoremap <silent> [unite]l :<C-u>Unite line<CR>
  " }}}
endif
" }}}

" neomru {{{
if neobundle#tap('neomru.vim')
  " config {{{
  call neobundle#config({
        \   'autoload' : {
        \     'unite_sources' : ['file_mru'],
        \   },
        \ })
  " }}}

  " キーマッピング {{{
  " 最近使ったファイル
  nnoremap <silent> [unite]u :<C-u>Unite file_mru buffer<CR>
  " }}}
endif
" }}}

" vimfiler {{{
if neobundle#tap('vimfiler')
  " config {{{
  call neobundle#config({
        \   'autoload' : {
        \     'commands' : [
        \       'VimFiler',
        \       'VimFilerBufferDir',
        \       'VimFilerExplorer',
        \     ],
        \     'mappings' : [
        \       '<Plug>(vimfiler_switch)',
        \     ],
        \     'explorer' : 1,
        \   }
        \ })
  " }}}

  " settings {{{
  " デフォルトのファイラをvimfilerに置き換える
  let g:vimfiler_as_default_explorer = 1

  " セーフモードは無効
  " let g:vimfiler_safe_mode_by_default = 0

  " }}}

  " キーマッピング {{{
  " 現在開いているバッファのディレクトリを開く
  nnoremap <silent> [vimfiler]e :<C-u>VimFilerBufferDir -quit<CR>
  " 現在開いているバッファをIDE風に開く
  nnoremap <silent> [vimfiler]i :<C-u>VimFilerExplorer -split -winwidth=40 -find -no-quit<CR>
  " }}}
endif
" }}}

" neocomplete {{{
if neobundle#tap('neocomplete.vim')
  " config {{{
  call neobundle#config({
        \   'autoload' : {
        \     'insert' : 1,
        \   },
        \   'disabled' : !has('lua'),
        \   'vim_version' : '7.3.885',
        \ })
  " }}}

  " settings {{{
  " AutoComplPopを無効化する（入れてないから不要なはず）
  let g:acp_enableAtStartup = 0
  " neocompleteを有効化
  let g:neocomplete#enable_at_startup = 1
  " スマートケース
  let g:neocomplete#enable_smart_case = 1
  " 最小の入力数
  let g:neocomplete#sources#syntax#min_keyword_length = 3
  let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

  " 辞書定義
  let g:neocomplete#sources#dictionary#dictionaries = {
        \   'default' : '',
        \   'vimshell' : $HOME.'/.vimshell_hist',
        \   'scheme' : $HOME.'/.gosh_completions'
        \ }

  " キーワード定義
  if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  " オムニ補完
  augroup neocomplete
    autocmd!
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  augroup END

  " ヘビーなオムニ補完を有効化
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
  let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
  " }}}

  " キーマッピング {{{
  inoremap <expr><C-g> neocomplete#undo_completion()
  inoremap <expr><C-l> neocomplete#complete_common_string()

  " 推奨されるキーマッピング
  " CRでポップアップをクローズしてインデントを保存
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return neocomplete#close_popup() . "\<CR>"
  endfunction
  " TABで補完
  inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
  " <C-h>や<BS>でポップアップをクローズして1文字消す
  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><C-y> neocomplete#close_popup()
  inoremap <expr><C-e> neocomplete#cancel_popup()
  " }}}
endif
" }}}

" neosnippet.vim {{{
if neobundle#tap('neosnippet.vim')
  " config {{{
  call neobundle#config({
        \   'autoload' : {
        \     'insert' : 1,
        \     'commands' : [
        \       'NeoSnippetEdit',
        \       'NeoSnippetSource',
        \     ],
        \     'filetypes' : [
        \       'snippet',
        \       'nsnippet',
        \     ],
        \     'unite_sources' : [
        \       'snippet',
        \       'neosnippet/user',
        \       'neosnippet/runtime',
        \     ],
        \   },
        \ })
  " }}}

  " キーマッピング {{{
  " プラグインキーマッピング
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)

  " Tabでも補完する
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  " For snippet_complete marker.
  if has('conceal')
    set conceallevel=2 concealcursor=i
  endif
  " }}}
endif
" }}}

" neosnippet-snippets {{{
if neobundle#tap('neosnippet-snippets')
  " config {{{
  call neobundle#config({
        \   'autoload' : {
        \     'on_source' : ['neosnippet.vim'],
        \   },
        \ })
  " }}}
endif
" }}}

" neosnippet-additional {{{
if neobundle#tap('neosnippet-additional')
  " config {{{
  call neobundle#config({
        \   'autoload' : {
        \     'on_source' : ['neosnippet.vim'],
        \   },
        \ })
  " }}}

  " setting {{{
  if !exists('g:neosnippet#snippets_directory')
    let g:neosnippet#snippets_directory = []
  endif
  let g:neosnippet#snippets_directory += ['~/.vim/bundle/neosnippet-additional/snippets/']
  " }}}
endif
" }}}

" fugitive {{{
if neobundle#tap('vim-fugitive')
  " settings {{{
  augroup fugitive_cmd
    autocmd!
    " Windowsだとコミット画面のfencがcp932になるので、強制的にutf-8にする
    " オプションで変更できたりするのかな？
    autocmd FileType gitcommit :set fileencoding=utf-8
  augroup END
  " }}}

  " キーマッピング {{{
  " git-status
  nnoremap <silent> [git]s :<C-u>Gstatus<CR>
  " git-diff
  nnoremap <silent> [git]d :<C-u>Gvdiff<CR>
  " }}}
endif
" }}}

" agit {{{
if neobundle#tap('agit.vim')
  " キーマッピング {{{
  nnoremap <silent> [git]a :<C-u>Agit<CR>
  " }}}
endif
" }}}

" Merginal {{{
if neobundle#tap('vim-merginal')
  " キーマッピング {{{
  nnoremap <silent> [git]m :<C-u>Merginal<CR>
  " }}}
endif
" }}}

" vimshell {{{
if neobundle#tap('vimshell')
  " config {{{
  call neobundle#config({
        \   'autoload' : {
        \     'commands' : [
        \       {
        \         'name' : 'VimShell',
        \         'complete' : 'customlist,vimshell#complete',
        \       },
        \       'VimShellExecute',
        \       'VimShellPop',
        \     ],
        \     'mappings' : [
        \       '<Plug>(vimshell_switch)'
        \     ],
        \   },
        \ })
  " }}}
endif
" }}}

" eskk {{{
if neobundle#tap('eskk.vim')
  " settings {{{
  let g:eskk#directory = '~/.skk'
  if has('gui_running')
    set imdisable
  endif
  if has('vim_starting')
    if neobundle#tap('neocomplete.vim')
      let g:eskk#enable_completion=1
    endif
    let g:eskk#dictionary = {
          \   'path' : '~/.skk/skk-jisyo.user',
          \   'sorted' : 0,
          \   'encoding' : 'utf-8',
          \ }
    let g:eskk#large_dictionary = {
          \   'path' : '~/.skk/SKK-JISYO.L',
          \   'sorted' : 1,
          \   'encoding' : 'euc-jp',
          \ }
  endif
  " }}}
endif
" }}}

" vim-unified-diff {{{
if neobundle#tap('vim-unified-diff')
  " settings {{{
  set diffexpr=unified_diff#diffexpr()

  " configure with the flllowings (default values are shown below)
  "let unified_diff#executable = 'git'
  "let unified_diff#arguments = [
  "  \   'diff', '--no-index', '--no-color', '--no-ext-diff', '--unified=0',
  "  \ ]
  "let unified_diff#iwhite_arguments = [
  "  \   '--ignore--all-space',
  "  \ ]
  let unified_diff#iwhite_arguments = [] " スペースの変化も表示対象にする TODO できていないぽい
  " }}}
endif

" }}}

" nebula {{{
if neobundle#tap('nebula.vim')
  " config {{{
  call neobundle#config({
        \   'autoload' : {
        \     'filetypes' : [
        \       'vim',
        \     ],
        \   },
        \ })
  " }}}

  " on_source {{{
  function! neobundle#tapped.hooks.on_source(bundle) abort
    if neobundle#is_sourced(a:bundle.name)
      nnoremap <silent> [nebula]l :<C-u>NebulaPutLazy<CR>
      nnoremap <silent> [nebula]c :<C-u>NebulaPutConfig<CR>
      nnoremap <silent> [nebula]y :<C-u>NebulaYankOptions<CR>
      nnoremap <silent> [nebula]p :<C-u>NebulaPutFromClipboard<CR>
    endif
  endfunction
  " }}}
endif
" }}}

" vim-scala {{{
if neobundle#tap('vim-scala')
  " config {{{
  call neobundle#config({
        \   'autoload' : {
        \     'filetypes' : [
        \       'sbt.scala',
        \       'scala',
        \     ]
        \   }
        \ })
  " }}}

  " settings {{{
  " ftdetectが読み込まれないので、ここで読んでしまう
  augroup vim_scala
    autocmd!
    source ~/.vim/bundle/vim-scala/ftdetect/scala.vim
  augroup END

  " }}}
endif
" }}}

" vim-less {{{
if neobundle#tap('vim-less')
  " config {{{
  call neobundle#config({
        \   'autoload' : {
        \     'filetypes' : [
        \       'less',
        \     ]
        \   }
        \ })
  " }}}

  " settings {{{
  " ftdetectが読み込まれないので、ここで読んでしまう
  augroup vim_less
    autocmd!
    source ~/.vim/bundle/vim-less/ftdetect/less.vim
  augroup END

  " }}}
endif
" }}}

" vim-coffee-script {{{
if neobundle#tap('vim-coffee-script')
  " config {{{
  call neobundle#config({
        \   'autoload' : {
        \     'filetypes' : [
        \       'coffee',
        \     ]
        \   }
        \ })
  " }}}

  " settings {{{
  " ftdetectが読み込まれないので、ここで読んでしまう
  augroup vim_less
    autocmd!
    source ~/.vim/bundle/vim-coffee-script/ftdetect/coffee.vim
  augroup END

  " }}}
endif
" }}}

" vim-vimlint {{{
if neobundle#tap('vim-vimlint')
  " config {{{
  call neobundle#config({
        \   'autoload' : {
        \     'on_source' : [
        \       'vim-watchdogs',
        \     ],
        \   },
        \ })
  " }}}

  " on_source {{{
  function! neobundle#tapped.hooks.on_source(bundle) abort
    if neobundle#is_sourced(a:bundle.name)
      function! s:get_plugin_dir(plugin_name) abort
        return substitute(fnamemodify(globpath(&rtp, "autoload/".a:plugin_name.".vim"), ":h:h"), '\\', '/', "g")
      endfunction

      if !exists('g:quickrun_config')
        let g:quickrun_config = {}
      endif
      if !has_key(g:quickrun_config, 'vim/watchdogs_checker')
        let g:quickrun_config['vim/watchdogs_checker'] = {}
      endif
      let g:quickrun_config['vim/watchdogs_checker']['type'] = 'watchdogs_checker/vimlint'
      if !has_key(g:quickrun_config, 'watchdogs_checker/vimlint')
        let g:quickrun_config['watchdogs_checker/vimlint'] = {}
      endif
      let g:quickrun_config['watchdogs_checker/vimlint']['exec'] = '%C -X -N -u NONE -i NONE -V1 -e -s -c "set rtp+='.s:get_plugin_dir('vimlparser').','.s:get_plugin_dir('vimlint').'" -c "call vimlint#vimlint(''%s'', %{ exists(''g:vimlint#config'') ? string(g:vimlint#config) : g:watchdogs#vimlint_empty_config })" -c "qall!"'
      call watchdogs#setup(g:quickrun_config)
    endif
  endfunction
  " }}}
endif
" }}}

" vim-watchdogs {{{
if neobundle#tap('vim-watchdogs')
  " config {{{
  call neobundle#config({
        \   'autoload' : {
        \     'insert' : 1,
        \   }
        \ })
  " }}}

  " on_source {{{
  function! neobundle#tapped.hooks.on_source(bundle) abort
    if neobundle#is_sourced(a:bundle.name)
      " 設定を追加してやる
      call watchdogs#setup(g:quickrun_config)
    endif
  endfunction
  " }}}

  " settings {{{
  if !exists('g:quickrun_config')
    let g:quickrun_config = {}
  endif
  if !has_key(g:quickrun_config, 'watchdogs_checker/_')
    let g:quickrun_config['watchdogs_checker/_'] = {}
  endif
  let g:quickrun_config['watchdogs_checker/_']['runner/vimproc/updatetime'] = 20
  let g:quickrun_config['watchdogs_checker/_']['outputter/quickfix/open_cmd'] = ''

  " 書き込み後にシンタックスチェックを行う
  let g:watchdogs_check_BufWritePost_enable = 1

  " 一定時間以上キー入力がなかった場合にシンタックスチェックを行う
  " バッファに書き込み後、1度だけ行われる
  let g:watchdogs_check_CursorHold_enable = 1

  " }}}
endif
" }}}

" vim-qfsigns {{{
if neobundle#tap('vim-qfsigns')
  " config {{{
  call neobundle#config({
        \   'autoload' : {
        \     'on_source' : ['vim-watchdogs'],
        \   }
        \ })
  " }}}

  " settings {{{
  if !exists('g:quickrun_config')
    let g:quickrun_config = {}
  endif
  if !has_key(g:quickrun_config, 'watchdogs_checker/_')
    let g:quickrun_config['watchdogs_checker/_'] = {}
  endif
  let g:quickrun_config['watchdogs_checker/_']['hook/qfsigns_update/enable_exit'] = 1
  let g:quickrun_config['watchdogs_checker/_']['hook/qfsigns_update/priority_exit'] = 3

  let g:qfsigns#AutoJump = 1
  " }}}
endif
" }}}

" vim-qfstatusline {{{
if neobundle#tap('vim-qfstatusline')
  " config {{{
  call neobundle#config({
        \   'autoload' : {
        \     'on_source' : ['vim-watchdogs'],
        \   }
        \ })
  " }}}

  " on_source {{{
  function! neobundle#tapped.hooks.on_source(bundle) abort
    if neobundle#is_sourced(a:bundle.name)
      " set statusline+=%#warningmsg#
      " set statusline+=%{StatuslineUpdate()}
      " set statusline+=%*
    endif
  endfunction
  " }}}

  " settings {{{
  if !exists('g:quickrun_config')
    let g:quickrun_config = {}
  endif
  if !has_key(g:quickrun_config, 'watchdogs_checker/_')
    let g:quickrun_config['watchdogs_checker/_'] = {}
  endif
  let g:quickrun_config['watchdogs_checker/_']['hook/qfstatusline_update/enable_exit'] = 1
  let g:quickrun_config['watchdogs_checker/_']['hook/qfstatusline_update/priority_exit'] = 3

  let g:Qfstatusline#UpdateCmd = function('lightline#update')
  " }}}
endif
" }}}

" vim-textobj-multiblock {{{
if neobundle#tap('vim-textobj-multiblock')
  " キーマッピング {{{
  omap ab <Plug>(textobj-multiblock-a)
  omap ib <Plug>(textobj-multiblock-i)
  vmap ab <Plug>(textobj-multiblock-a)
  vmap ib <Plug>(textobj-multiblock-i)
  " }}}
endif
" }}}

" restart.vim {{{
if neobundle#tap('restart.vim')
  " config {{{
  call neobundle#config({
        \   'autoload' : {
        \     'commands' : [
        \       'Restart',
        \       'RestartWithSession',
        \     ],
        \   },
        \   'disabled' : !has('gui_running')
        \ })
  " }}}

  " on_source {{{
  function! neobundle#tapped.hooks.on_source(bundle) abort
    if neobundle#is_sourced(a:bundle.name)
      command! -bar RestartWithSession let g:restart_sessionoptions = 'blank,curdir,folds,help,localoptions,tabpages' | Restart
    endif
  endfunction
  " }}}

endif
" }}}

" Unite-colorscheme {{{
if neobundle#tap('unite-colorscheme')
  " config {{{
  call neobundle#config({
        \   'autoload' : {
        \     'unite_sources' : ['colorscheme'],
        \   }
        \ })
  " }}}
endif
" }}}

" lightline.vim {{{
if neobundle#tap('lightline.vim')
  " settings {{{
  let g:lightline = {
        \   'colorscheme' : 'solarized',
        \   'active' : {
        \     'left' : [
        \       [ 'mode', 'eskk', ],
        \       [ 'filename', ],
        \       [ 'fugitive', 'gitinfo', ],
        \     ],
        \     'right' : [
        \       [ 'syntaxcheck', 'lineinfo', ],
        \       [ 'percent', ],
        \       [ 'fileformat', 'fileencoding', 'filetype', ],
        \     ],
        \   },
        \   'component' : {
        \     'fileformat' : '%{FileInfoVisible() ? &fileformat : ""}',
        \     'filetype' : '%{FileInfoVisible() ? (!empty(&filetype) ? &filetype : "no ft") : ""}',
        \     'fileencoding' : '%{FileInfoVisible() ? (!empty(&fileencoding) ? &fileencoding : &encoding) : ""}',
        \   },
        \   'component_function' : {
        \     'mode' : 'Mode',
        \     'eskk' : 'Eskk',
        \     'fugitive' : 'Fugitive',
        \     'gitinfo' : 'Gitinfo',
        \     'filename' : 'Filename',
        \   },
        \   'component_expand' : {
        \     'syntaxcheck' : 'qfstatusline#Update',
        \   },
        \   'component_visible_condition' : {
        \     'eskk' : 'EskkVisible()',
        \     'fugitive' : 'FugitiveVisible()',
        \     'fileformat' : 'FileInfoVisible()',
        \     'filetype' : 'FileInfoVisible()',
        \     'fileencoding' : 'FileInfoVisible()',
        \     'gitinfo' : 'GitinfoVisible()',
        \   },
        \   'component_type' : {
        \     'syntaxcheck' : 'error',
        \   },
        \ }
  function! Mode() abort
    return winwidth(0) > 60 ? lightline#mode() : ''
  endfunction

  function! s:readonly() abort
    return &filetype !~? 'help\|vimfiler\|gundo' && &readonly ? 'RO' : ''
  endfunction

  function! s:modified() abort
    return &filetype =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! Filename() abort
    return (s:readonly() != '' ? s:readonly().' ' : '').
          \ (&filetype == 'vimfiler' ? vimfiler#get_status_string() :
          \  &filetype == 'unite' ? unite#get_status_string() :
          \  &filetype == 'vimshell' ? substitute(b:vimshell.current_dir, expand('~'), '~', '') :
          \  expand('%') != '' ? expand('%') : '[No Name]').
          \ (s:modified() != '' ? ' '.s:modified() : '')
  endfunction

  function! EskkVisible() abort
    return exists("*eskk#statusline") && !empty(eskk#statusline())
  endfunction

  function! Eskk() abort
    return EskkVisible() ? matchlist(eskk#statusline(), "^\\[eskk:\\(.\\+\\)\\]$")[1] : ''
  endfunction

  function! FugitiveVisible() abort
    return exists("*fugitive#head") && !empty(fugitive#head())
  endfunction

  function! Fugitive() abort
    return FugitiveVisible() ? "[".fugitive#head()."]" : ""
  endfunction

  function! GitinfoVisible() abort
    return exists('*GitGutterGetHunkSummary') && get(g:, 'gitgutter_enabled', 0) && winwidth(0) > 90
  endfunction

  function! Gitinfo() abort
    if !GitinfoVisible()
      return ''
    endif

    let symbols = [
          \ g:gitgutter_sign_added.' ',
          \ g:gitgutter_sign_modified.' ',
          \ g:gitgutter_sign_removed.' ',
          \ ]
    let hunks = GitGutterGetHunkSummary()
    let ret = []
    for i in [0, 1, 2]
      if hunks[i] > 0
        call add(ret, symbols[i].hunks[i])
      endif
    endfor

    return join(ret, ' ')
  endfunction

  function! FileInfoVisible() abort
    return winwidth(0) > 70
  endfunction
  " }}}
endif
" }}}

" vim-gitgutter {{{
if neobundle#tap('vim-gitgutter')
  " settings {{{
  let g:gitgutter_sign_added = 'A'
  let g:gitgutter_sign_modified = 'M'
  let g:gitgutter_sign_removed = 'D'
  let g:gitgutter_sign_modified_removed = 'MD'
  " }}}

  " キーマッピング {{{
  nnoremap <silent> [git]h :<C-u>GitGutterLineHighlightsToggle<CR>
  nnoremap <silent> [git]n :<C-u>GitGutterNextHunk<CR>
  nnoremap <silent> [git]p :<C-u>GitGutterPrevHunk<CR>
  " }}}
endif
" }}}

" unite-tag {{{
if neobundle#tap('unite-tag')
  " config {{{
  call neobundle#config({
        \   'autoload' : {
        \     'unite_sources' : ['tag'],
        \   },
        \ })
  " }}}

  " on_source {{{
  function! neobundle#tapped.hooks.on_source(bundle) abort
    if neobundle#is_sourced(a:bundle.name)
      echomsg string('unite-tag sourced')
    endif
  endfunction
  " }}}

  " settings {{{
  let g:unite_source_tag_max_fname_length = 100
  let g:unite_source_tag_max_name_length = 15
  " }}}

  " キーマッピング {{{
  augroup unite_tag
    autocmd!
    autocmd BufEnter * if empty(&buftype) | nnoremap <buffer> <C-]> :<C-u>UniteWithCursorWord -immediately -no-start-insert tag<CR> | endif
    autocmd BufEnter * if empty(&buftype) | nnoremap <buffer> <C-t> :<C-u>Unite jump<CR> | endif
  augroup END
  " }}}
endif
" }}}
" }}}

" 表示設定 {{{
if has('unix')
  " Linuxで文字化けするので、Linuxならtermencodingをutf-8にする（kaoriya vimrcではcp932になる？）
  set termencoding=utf-8
  set encoding=utf-8
endif

" シンタックスハイライト
syntax enable

if !has('gui_running')
  set t_Co=256
  set background=dark
  colorscheme solarized
endif


" 行番号を表示
set number

" ルーラーを表示
set ruler

" タブや改行を表示
set list
set listchars=tab:»\ ,extends:<,trail:>

" 画面上でのタブ幅
set tabstop=4
" ↓これをやらないとインデントが余分に入る
set shiftwidth=4
" 改行しない
set nowrap
" 自動折り返しなし
set tw=0

" カーソル行をハイライト
set cursorline

" vimdiffの色設定
" TODO 調整の余地あり
highlight DiffAdd cterm=bold ctermfg=10 ctermbg=22
highlight DiffDelete cterm=bold ctermfg=10 ctermbg=52
highlight DiffChange cterm=bold ctermfg=10 ctermbg=17
highlight DiffText cterm=bold ctermfg=10 ctermbg=21

" }}}

" ファイル操作設定 {{{
" バックアップファイルを作成する
set backup

" バックアップファイルの作成場所
set backupdir=$HOME/.vim/.backup
" スワップファイルの作成場所
set directory=$HOME/.vim/.backup
" undoファイル（.*.un~）の作成場所
set undodir=$HOME/.vim/.backup

" 編集中でも他のファイルを開けるように
set hidden

" 保存時に行末の空白を除去
augroup del_end_ws
  autocmd!
  autocmd BufWritePre * :%s/\s\+$//ge
augroup END

" }}}

" ファイルタイプ設定 {{{

" PHP {{{
let g:php_sql_query = 1
let g:php_baselib = 1
let g:php_htmlInStrings = 1
let g:php_noShortTags = 1
let g:php_folding = 1

" DBをMySQLにする（シンタックスハイライトがきく？）
let g:sql_type_default='mysql'
" }}}
" }}}

" その他の設定 {{{
" クリップボードを共有
if has('unix')
  set clipboard=unnamedplus
else
  set clipboard=unnamed
endif

" □とか○の文字があってもカーソル位置がずれないようにする
if exists('&ambiwidth')
  set ambiwidth=double
endif

" Ctrl+a,Ctrl+xでインクリメント、デクリメントするときに、先頭に
" 0詰めされた 001 などを8進数ではなく普通の数字とみなす
set nf=""

" }}}

" プラグイン非依存のキーマッピング {{{

" ESC連打でハイライトを消す
nmap <silent> <Esc><Esc> :nohlsearch<CR><Esc>

" 検索語が画面中央に来るようにする
nmap n nzz
nmap N Nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz

" 表示行で移動
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" コマンドラインで日付・タイムスタンプを補完
cnoremap <expr> <C-X>dt strftime('%Y%m%d')
cnoremap <expr> <C-X>ts strftime('%Y%m%D%H%M%S')

" visualモードで連続ペースト
vnoremap <silent> <C-p> "0p<CR>

" vimrcを開く
nnoremap <silent> <Leader>ev :<C-u>edit <C-r>=resolve(expand($MYVIMRC))<CR><CR>
" vimrcをリロード
nnoremap <silent> <Leader>rv :<C-u>source $MYVIMRC<CR>

if has('gui_running')
  " gvimrcを開く
  nnoremap <silent> <Leader>eg :<C-u>edit <C-r>=resolve(expand($MYGVIMRC))<CR><CR>
  " gvimrcをリロード
  nnoremap <silent> <Leader>rg :<C-u>source $MYGVIMRC<CR>
endif
" }}}
