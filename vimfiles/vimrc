" vim:set ts=8 sts=2 sw=2 tw=0 foldmethod=marker:

" scriptencodingは先頭で宣言するといいらしい
scriptencoding utf-8

" NeoBundle設定 {{{

" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if has('vim_starting')
  if &compatible
    set nocompatible
  endif

  " 必須
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" 必須
call neobundle#begin(expand('~/.vim/bundle/'))

" NeoBundleをNeoBundleで管理する
" 必須
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
" Refer to |:NeoBundle-examples|.
" Note: You don't set neobundle setting in .gvimrc!

if has('unix')
  " vimprocは香り屋版にバンドルされているので、Winでは不要
  " Linuxで必要になるなら有効にする
  " インストール後、自動的にビルドされる
  " ※has('unix')してるくせにその他の環境まで書いてあるのはご愛嬌
  NeoBundle 'Shougo/vimproc', {
  \ 'build' : {
  \     'windows' : 'tools\\update-dll-mingw',
  \     'cygwin' : 'make -f make_cygwin.mak',
  \     'mac' : 'make -f make_mak.mak',
  \     'linux' : 'make',
  \     'unix' : 'gmake',
  \     },
  \ }
endif

" -- Solarized
NeoBundle 'altercation/vim-colors-solarized'

" -- Unite
NeoBundle 'Shougo/unite.vim'

" -- neomru
" ※Uniteから分離したらしい
NeoBundle 'Shougo/neomru.vim'

" -- vimfiler
NeoBundle 'Shougo/vimfiler'

" -- surround
NeoBundle 'tpope/vim-surround'

" -- repeat(surroundとセットで)
NeoBundle 'tpope/vim-repeat'

" -- neocomplete
NeoBundle 'Shougo/neocomplete.vim'

" -- neosnippet
NeoBundle 'Shougo/neosnippet'

" -- neosnippetのスニペット
NeoBundle 'Shougo/neosnippet-snippets'

" -- tcomment_vim
NeoBundle 'tomtom/tcomment_vim'

" -------- " -- quickrun
" -------- " ※あんまり必要ない気がする
" -------- NeoBundle 'thinca/vim-quickrun'

" -------- " -- sudo.vim
" -------- " ※Winで必要か？
" -------- NeoBundle 'vim-scripts/sudo.vim'

" -- vimshell
NeoBundle 'Shougo/vimshell'

" -- vim-scala
NeoBundle 'derekwyatt/vim-scala'

" -------- " -- scala-vim-snippets
" -------- NeoBundle 'tommorris/scala-vim-snippets'

" -- html5
" オムニ補完で問題が起こるぽいのでいったん削除
" NeoBundle 'taichouchou2/html5.vim'

" -- vim-less
NeoBundle 'groenewege/vim-less'

" -- vim-coffee-script
NeoBundle 'kchmck/vim-coffee-script'

" -- smarty-syntax
NeoBundle 'smarty-syntax'

" -- fugitive
NeoBundle 'tpope/vim-fugitive'

" -- Agit
NeoBundle 'cohama/agit.vim'

" -- syntastic
NeoBundle 'scrooloose/syntastic'

" Linuxでfcitxを制御するためのプラグイン
if has('unix')
  if executable('fcitx') && (has('python') || has('python3'))
    NeoBundle "koron/imcsc-vim", {
    \ "rtp":"fcitx-python",
    \ "directory":"fcitx-python",
    \ 'name':'fcitx-python',
    \ }
  endif
endif

" -- eskk
NeoBundle 'tyru/eskk.vim'

call neobundle#end()

" 必須!!
filetype plugin indent on

" インストールチェック
NeoBundleCheck

" }}} NeoBundle設定

" 各プラグインの設定 {{{
" matchit {{{
runtime macros/matchit.vim
" }}} matchit

" vimfiler {{{
" デフォルトのファイラをvimfilerに置き換える
let g:vimfiler_as_default_explorer = 1

" セーフモードは無効
"let g:vimfiler_safe_mode_by_default = 0

" }}} vimfiler

" Unite {{{
" insertモードで起動する
let g:unite_enable_start_insert=1
" yank/deleteの履歴を有効にする
let g:unite_source_history_yank_enable=1
" ファイル履歴のMAX
let g:unite_source_file_mru_limit=200
" }}} Unite

" neocomplete {{{
" AutoComplPopを無効化する（入れてないから不要なはず）
let g:acp_enableAtStartup = 0
" neocompleteを有効化
let g:neocomplete#enable_at_startup = 1
" スマートケース
let g:neocomplete#enable_smart_case = 1
" 最小の入力数
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" 辞書定義
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
    \ }

" キーワード定義
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" オムニ補完
augroup omni
  autocmd!
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
augroup END

" ヘビーなオムニ補完を有効化
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
" }}} neocomplete

" neosnippet {{{
" TODO あとでサイトを見て最新の設定を記述する
" }}} neosnippet

" fugitive {{{
au FileType gitcommit nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType gitcommit inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
au FileType fugitiveblame nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
" }}} fugitive

" syntastic {{{
let g:syntastic_check_on_open = 1
let g:syntastic_enable_signs = 1
let g:syntastic_echo_current_error = 1
let g:syntastic_auto_loc_list = 2
let g:syntastic_enable_highlighting = 1
" なぜかPHPのコマンドのオプションを上書きしないと動かないらしい
let g:syntastic_php_php_args = '-l'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatusLineFlag()}
set statusline+=%*
" }}} syntastic

" eskk {{{
set imdisable
if has('multi_byte_ime') || has('xim') || has('global-ime')
  set iminsert=2
else
  set iminsert=0
endif
set imsearch=0

let g:eskk#directory = "~/.eskk_vim"
let g:eskk#dictionary = {
  \ 'path': "~/.eskk_vim/dictionary/eskk",
  \ 'sorted': 0,
  \ 'encoding': 'utf-8',
  \}
let g:eskk#large_dictionary = {
  \ 'path': "~/.eskk_vim/dictionary/SKK-JISYO.L",
  \ 'sorted': 1,
  \ 'encoding': 'euc-jp',
  \}
let g:eskk#enable_completion = 1
" }}} eskk
" }}} 各プラグインの設定

" 表示設定 {{{
if has('unix')
  " Linuxで文字化けするので、Linuxならtermencodingをutf-8にする（kaoriya vimrcではcp932になる？）
  set termencoding=utf-8
  set encoding=utf-8
endif

" シンタックスハイライト
syntax enable

" カラーテーマ
set background=dark
colorscheme solarized

" 行番号を表示
set number

" ルーラーを表示
set ruler

" タブや改行を表示
set list
set listchars=tab:>>,extends:<,trail:>
"if has('win32')
"  set listchars=tab:>>,extends:<,trail:>
"else
"  set listchars=tab:≫\ ,extends:≪,trail:≫
"endif

" 画面上でのタブ幅
set tabstop=4
" ↓これをやらないとインデントが余分に入る
set shiftwidth=4
" 改行しない
set nowrap
" 自動折り返しなし
set tw=0

" ステータスラインの表示
set statusline=%< " 行が長すぎるときに切り詰める位置
set statusline+=[%n] " バッファ番号
set statusline+=%m " 修正フラグ
set statusline+=%r " 読み込み専用フラグ
set statusline+=%h " ヘルプバッファフラグ
set statusline+=%w " プレビューウィンドウフラグ
set statusline+=%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'} " fencとffを表示
set statusline+=%y " バッファ内のファイルタイプ
set statusline+=\  " 空白スペース
if winwidth(0) >= 130
  set statusline+=%F " バッファ内のファイルのフルパス
else
  set statusline+=%t " ファイル名のみ
endif
set statusline+=%= " 左寄せ項目と右寄せ項目の区切り
set statusline+=%{fugitive#statusline()} " Gitのブランチ名を表示
set statusline+=\ \  " 空白スペース2個
set statusline+=%1l " 何行目にカーソルがあるか
set statusline+=/
set statusline+=%L " バッファ内の総行数
" set statusline+=,
" set statusline+=%c " 何列目にカーソルがあるか
" set statusline+=%V " 画面上の何列目にカーソルがあるか
set statusline+=\ \  " 空白スペース2個
set statusline+=%P " ファイル内の何%の位置にあるか

" 入力モード時にステータスラインの色を変える
augroup InsertHook
  autocmd!
  autocmd InsertEnter * highlight StatusLine guifg=#CCDC90 guibg=#2E4340
  autocmd InsertLeave * highlight StatusLine guifg=#2E4340 guibg=#CCDC90
augroup END

" カーソル行をハイライト
set cursorline
augroup cch
  autocmd! cch
  autocmd WinLeave * set nocursorline
  autocmd WinEnter,BufRead * set cursorline
augroup END
:hi clear CursorLine
:hi CursorLine gui=underline
hi CursorLine ctermbg=black guibg=black

" vimdiffの色設定
highlight DiffAdd cterm=bold ctermfg=10 ctermbg=22
highlight DiffDelete cterm=bold ctermfg=10 ctermbg=52
highlight DiffChange cterm=bold ctermfg=10 ctermbg=17
highlight DiffText cterm=bold ctermfg=10 ctermbg=21

" }}} 表示設定

" ファイル操作設定 {{{
" バックアップファイルを作成する
set backup

" バックアップファイルの作成場所
set backupdir=$HOME/.vim/.backup
" スワップファイルの作成場所
set directory=$HOME/.vim/.backup
" undoファイル（.*.un~）の作成場所
set undodir=$HOME/.vim/.backup

" 編集中でも他のファイルを開けるように
set hidden

" 保存時に行末の空白を除去
augroup del_end_ws
  autocmd!
  autocmd BufWritePre * :%s/\s\+$//ge
augroup END

" }}} ファイル操作設定

" ファイルタイプ設定 {{{
" }}} ファイルタイプ設定

" その他の設定 {{{
" クリップボードを共有
if has('unix')
  set clipboard=unnamedplus
else
  set clipboard=unnamed
endif

" □とか○の文字があってもカーソル位置がずれないようにする
if exists('&ambiwidth')
  set ambiwidth=double
endif

" Ctrl+a,Ctrl+xでインクリメント、デクリメントするときに、先頭に
" 0詰めされた 001 などを8進数ではなく普通の数字とみなす
set nf=""

" diffコマンド
" -- git diff を使う。
" -- git diff の出力はVIMが対応していないらしいので、変換スクリプトを
" -- かませて実行する。
set diffexpr=GitDiff()
function! GitDiff()
  let opt = ""
  if &diffopt =~ "iwhite"
    let opt = opt . "-b "
  endif
  silent execute "!git-diff-normal-format ".opt.v:fname_in." ".v:fname_new." > ".v:fname_out
  redraw!
endfunction

" }}} その他の設定

" キーマッピング {{{

" プラグイン非依存 {{{
" ESC連打でハイライトを消す
nmap <silent> <Esc><Esc> :nohlsearch<CR><Esc>

" 検索語が画面中央に来るようにする
nmap n nzz
nmap N Nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz

" 表示行で移動
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" コマンドラインで日付・タイムスタンプを補完
cnoremap <expr> <C-X>dt strftime('%Y%m%d')
cnoremap <expr> <C-X>ts strftime('%Y%m%D%H%M%S')

" 改行の時に括弧を自動で閉じる
inoremap <expr><CR> <SID>ExCr()
function! s:ExCr()
  if col('.') != col('$')
    return "\<CR>"
  endif

  let l = getline('.')
  if l =~ '{$'
    return "\<CR>}\<Up>\<End>\<CR>"
  elseif l =~ '($'
    return "\<CR>)\<Up>\<End>\<CR>"
  elseif l =~ '[$'
    return "\<CR>]\<Up>\<End>\<CR>"
  else
    return "\<CR>"
  endif
endfunction

" visualモードで連続ペースト
vnoremap <silent> <C-p> "0p<CR>

" vimrcを開く
nnoremap <silent> <Leader>ev :<C-u>edit <C-r>=resolve(expand($MYVIMRC))<CR><CR>
" vimrcをリロード
nnoremap <silent> <Leader>rv :<C-u>source $MYVIMRC<CR>
" gvimrcを開く
nnoremap <silent> <Leader>eg :<C-u>edit <C-r>=resolve(expand($MYGVIMRC))<CR><CR>
" gvimrcをリロード
nnoremap <silent> <Leader>rg :<C-u>source $MYGVIMRC<CR>

" }}} プラグイン非依存

" Unite {{{
" prefix定義
nnoremap [unite] <Nop>
nmap <Leader>u [unite]

" バッファ一覧を開く
nnoremap <silent> [unite]b :Unite buffer<CR>
" 同一ディレクトリ内のファイル一覧を出す
nnoremap <silent> [unite]f :UniteWithBufferDir -buffer-name=files file<CR>
" Unite-grep
nnoremap <silent> [unite]g :Unite grep -buffer-name=grep<CR>
nnoremap <silent> [unite]r :<C-u>UniteResume grep<CR>
" ヤンク
nnoremap <silent> [unite]y :<C-u>Unite history/yank<CR>
" 最近使ったファイル
nnoremap <silent> [unite]u :<C-u>Unite file_mru buffer<CR>
" ブックマーク一覧
nnoremap <silent> [unite]m :<C-u>Unite bookmark<CR>
" }}} Unite

" vimfiler {{{
" prefix定義
nnoremap [vimfiler] <Nop>
nmap <Leader>f [vimfiler]

" 現在開いているバッファのディレクトリを開く
nnoremap <silent> [vimfiler]e :<C-u>VimFilerBufferDir -quit<CR>
" 現在開いているバッファをIDE風に開く
nnoremap <silent> [vimfiler]i :<C-u>VimFilerExplorer -split -winwidth=40 -find -no-quit<CR>
" }}} vimfiler

" neocomplete {{{
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()

" 推奨されるキーマッピング
" CRでポップアップをクローズしてインデントを保存
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
endfunction
" TABで補完
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>や<BS>でポップアップをクローズして1文字消す
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y> neocomplete#close_popup()
inoremap <expr><C-e> neocomplete#cancel_popup()
" }}} neocomplete

" neosnippet {{{
" プラグインキーマッピング
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

" Tabでも補完する
imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For snippet_complete marker.
if has('concela')
  set conceallevel=2 concealcursor=i
endif
" }}} neosnippet

" fugitive, Agit {{{
" prefix定義
nnoremap [git] <Nop>
nmap <Leader>g [git]

" git-status
nnoremap <silent> [git]s :<C-u>Gstatus<CR>
" git-diff
nnoremap <silent> [git]d :<C-u>Gvdiff<CR>

" Agit
nnoremap <silent> [git]a :<C-u>Agit<CR>

" }}} fugitive, Agit
" }}} キーマッピング
