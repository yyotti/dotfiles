scriptencoding utf-8
" vim:set ts=8 sts=2 sw=2 tw=0 expandtab foldmethod=marker:

" プラグイン管理 {{{

" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

" NeoBundle {{{
if has('vim_starting')
  if &compatible
    set nocompatible
  endif

  " neobundle をインストールしていなければ自動でインストール
  if !isdirectory(expand('~/.vim/bundle/neobundle.vim/'))
    echo 'install neobundle...'
    call system('curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh | sh')
  endif

  " 必須
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" 必須
call neobundle#begin(expand('~/.vim/bundle/'))

" NeoBundleをNeoBundleで管理する
" 必須
NeoBundleFetch 'Shougo/neobundle.vim'

" }}}

" My Bundles here:
" Refer to |:NeoBundle-examples|.
" Note: You don't set neobundle setting in .gvimrc!

" vimproc {{{
if has('unix')
  " vimprocは香り屋版にバンドルされているので、Winでは不要
  " Linuxで必要になるなら有効にする
  " インストール後、自動的にビルドされる
  " ※has('unix')してるくせにその他の環境まで書いてあるのはご愛嬌
  NeoBundle 'Shougo/vimproc', {
        \   'build': {
        \     'windows': 'tools\\update-dll-mingw',
        \     'cygwin': 'make -f make_cygwin.mak',
        \     'mac': 'make -f make_mak.mak',
        \     'linux': 'make',
        \     'unix': 'gmake',
        \   },
        \ }
endif
" }}}

" Lazyしないプラグイン {{{
" -- Solarized
NeoBundle 'altercation/vim-colors-solarized'

" -- surround
NeoBundle 'tpope/vim-surround'

" -- repeat
NeoBundle 'tpope/vim-repeat', {
      \   'depends': ['tpope/vim-surround'],
      \ }

" -- fugitive
" ※fugitiveも遅延ロードしたかったが、autocmdを多用しているので無理らしい
NeoBundle 'tpope/vim-fugitive'

" -- Agit
" ※fugitiveとvim-merginalが遅延ロードできないので、ついでにこいつも遅延ロードしない
NeoBundle 'cohama/agit.vim', {
      \   'depends': ['tpope/vim-fugitive'],
      \ }

" -- vim-merginal
" ※これもautocmdを使っているので遅延ロードできない
NeoBundle 'idanarye/vim-merginal', {
      \   'depends': ['tpope/vim-fugitive'],
      \ }

" -- eskk.vim
NeoBundle 'tyru/eskk.vim'

" -- vim-unified-diff
NeoBundle 'lambdalisue/vim-unified-diff'

" -- tcomment_vim
NeoBundle 'tomtom/tcomment_vim'

" }}}

" Lazy {{{
" -- Unite
NeoBundleLazy 'Shougo/unite.vim', {
      \   'depends': ['Shougo/vimproc'],
      \ }

" -- vimfiler
NeoBundleLazy 'Shougo/vimfiler', {
      \   'depends': ['Shougo/unite.vim'],
      \ }

" -- neomru
" ※Uniteから分離したらしい
NeoBundleLazy 'Shougo/neomru.vim', {
      \   'depends': ['Shougo/unite.vim'],
      \}

" -- neocomplete
if has('lua')
  NeoBundleLazy 'Shougo/neocomplete.vim', {
        \   'depends': ['Shougo/vimproc'],
        \ }
endif

" -- neosnippet
NeoBundleLazy 'Shougo/neosnippet', {
      \   'depends': ['Shougo/neosnippet-snippets'],
      \ }

" -- neosnippetのスニペット
NeoBundleLazy 'Shougo/neosnippet-snippets'

" -- vimshell
NeoBundleLazy 'Shougo/vimshell', {
      \   'depends': ['Shougo/vimproc'],
      \ }

" -- syntastic
NeoBundleLazy 'scrooloose/syntastic'

" -- nebula
NeoBundleLazy 'LeafCage/nebula.vim'

" -- vim-scala
NeoBundleLazy 'derekwyatt/vim-scala'

" -- vim-less
NeoBundleLazy 'groenewege/vim-less'

" -- vim-coffee-script
NeoBundleLazy 'kchmck/vim-coffee-script'

" -- vim-vimlint
NeoBundleLazy 'syngan/vim-vimlint', {
      \   'depends': 'ynkdir/vim-vimlparser',
      \ }
" }}}

" NeoBundle管理以外 {{{

" matchit {{{
runtime macros/matchit.vim
" }}}

" }}}

" 試験的に導入するプラグイン {{{
" }}}

" -------- " -- scala-vim-snippets
" -------- NeoBundle 'tommorris/scala-vim-snippets'

" -- html5
" オムニ補完で問題が起こるぽいのでいったん削除
" NeoBundle 'taichouchou2/html5.vim'

" -- nebula
NeoBundle 'LeafCage/nebula.vim'

call neobundle#end()

" 必須!!
filetype plugin indent on

" インストールチェック
NeoBundleCheck

" }}}

" 各プラグインの設定 {{{

" Unite {{{
if neobundle#tap('unite.vim')
  " config {{{
  call neobundle#config({
        \   'autoload': {
        \     'commands': [
        \       {
        \         'name': 'Unite',
        \         'complete': 'customlist,unite#complete_source'
        \       },
        \     ]
        \   }
        \ })
  " }}}

  " on_source {{{
  function! neobundle#tapped.hooks.on_source(bundle) abort
    if neobundle#is_sourced(a:bundle.name)
      " デフォルトアクションを書き換える
      call unite#custom_default_action('directory', 'vimfiler')
    endif
  endfunction
  " }}}

  " settings {{{
  " insertモードで起動する
  let g:unite_enable_start_insert=1
  " yank/deleteの履歴を有効にする
  let g:unite_source_history_yank_enable=1
  " ファイル履歴のMAX
  let g:unite_source_file_mru_limit=200
  " }}}

  " キーマッピング {{{
  " prefix定義
  nnoremap [unite] <Nop>
  nmap <Leader>u [unite]

  " バッファ一覧を開く
  nnoremap <silent> [unite]b :Unite buffer<CR>
  " 同一ディレクトリ内のファイル一覧を出す
  nnoremap <silent> [unite]f :UniteWithBufferDir -buffer-name=files file<CR>
  " Unite-grep
  nnoremap <silent> [unite]g :Unite grep -buffer-name=grep<CR>
  nnoremap <silent> [unite]r :<C-u>UniteResume grep<CR>
  " ヤンク
  nnoremap <silent> [unite]y :<C-u>Unite history/yank<CR>
  " 最近使ったファイル
  nnoremap <silent> [unite]u :<C-u>Unite file_mru buffer<CR>
  " ブックマーク一覧
  nnoremap <silent> [unite]m :<C-u>Unite bookmark<CR>
  " バッファ内で行を検索
  nnoremap <silent> [unite]l :<C-u>Unite line<CR>
  " }}}
endif

" [neomru] {{{
if neobundle#tap('neomru.vim')
  call neobundle#config({
        \   'autoload': {
        \     'on_source': ['unite.vim'],
        \   },
        \ })
endif
" }}}

" }}}

" vimfiler {{{
if neobundle#tap('vimfiler')
  " config {{{
  call neobundle#config({
        \   'autoload': {
        \     'commands': [
        \       'VimFiler',
        \       'VimFilerBufferDir',
        \       'VimFilerExplorer',
        \     ],
        \     'mappings': [
        \       '<Plug>(vimfiler_switch)',
        \     ],
        \     'explorer': 1,
        \   }
        \ })
  " }}}

  " settings {{{
  " デフォルトのファイラをvimfilerに置き換える
  let g:vimfiler_as_default_explorer = 1

  " セーフモードは無効
  " let g:vimfiler_safe_mode_by_default = 0

  " }}}

  " キーマッピング {{{
  " prefix定義
  nnoremap [vimfiler] <Nop>
  nmap <Leader>f [vimfiler]

  " 現在開いているバッファのディレクトリを開く
  nnoremap <silent> [vimfiler]e :<C-u>VimFilerBufferDir -quit<CR>
  " 現在開いているバッファをIDE風に開く
  nnoremap <silent> [vimfiler]i :<C-u>VimFilerExplorer -split -winwidth=40 -find -no-quit<CR>
  " }}}
endif

" }}}

" neocomplete {{{
if neobundle#tap('neocomplete.vim')
  " config {{{
  call neobundle#config({
        \   'autoload': {
        \     'insert': 1,
        \   }
        \ })
  " }}}

  " settings {{{
  " AutoComplPopを無効化する（入れてないから不要なはず）
  let g:acp_enableAtStartup = 0
  " neocompleteを有効化
  let g:neocomplete#enable_at_startup = 1
  " スマートケース
  let g:neocomplete#enable_smart_case = 1
  " 最小の入力数
  let g:neocomplete#sources#syntax#min_keyword_length = 3
  let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

  " 辞書定義
  let g:neocomplete#sources#dictionary#dictionaries = {
        \   'default': '',
        \   'vimshell': $HOME.'/.vimshell_hist',
        \   'scheme': $HOME.'/.gosh_completions'
        \ }

  " キーワード定義
  if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  " オムニ補完
  augroup neocomplete
    autocmd!
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  augroup END

  " ヘビーなオムニ補完を有効化
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
  let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
  " }}}

  " キーマッピング {{{
  inoremap <expr><C-g> neocomplete#undo_completion()
  inoremap <expr><C-l> neocomplete#complete_common_string()

  " 推奨されるキーマッピング
  " CRでポップアップをクローズしてインデントを保存
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return neocomplete#close_popup() . "\<CR>"
  endfunction
  " TABで補完
  inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
  " <C-h>や<BS>でポップアップをクローズして1文字消す
  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><C-y> neocomplete#close_popup()
  inoremap <expr><C-e> neocomplete#cancel_popup()
  " }}}
endif
" }}}

" neosnippet {{{
if neobundle#tap('neosnippet.vim')
  " config {{{
  call neobundle#config({
        \   'autoload': {
        \     'insert': 1,
        \     'commands': [
        \       'NeoSnippetEdit',
        \       'NeoSnippetSource',
        \     ],
        \     'filetypes': [
        \       'snippet',
        \       'nsnippet',
        \     ],
        \     'unite_sources': [
        \       'snippet',
        \       'neosnippet/user',
        \       'neosnippet/runtime',
        \     ],
        \   },
        \ })
  " }}}

  " setting {{{
  " }}}

  " キーマッピング {{{
  " プラグインキーマッピング
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)

  " Tabでも補完する
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  " For snippet_complete marker.
  if has('conceal')
    set conceallevel=2 concealcursor=i
  endif
  " }}}
endif
" }}}

" neosnippet-snippets {{{
if neobundle#tap('neosnippet-snippets.vim')
  " config {{{
  call neobundle#config({
        \   'autoload': {
        \     'on_source': ['neosnippet.vim'],
        \   },
        \ })
  " }}}
endif
" }}}

" fugitive, Agit, Merginal {{{
" prefix定義
nnoremap [git] <Nop>
nmap <Leader>g [git]

" fugitive {{{
if neobundle#tap('vim-fugitive')
  " settings {{{
  augroup fugitive_cmd
    autocmd!
    autocmd FileType gitcommit nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
    autocmd FileType gitcommit inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
    " Windowsだとコミット画面のfencがcp932になるので、強制的にutf-8にする
    " オプションで変更できたりするのかな？
    autocmd FileType gitcommit :set fileencoding=utf-8
    autocmd FileType fugitiveblame nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
  augroup END
  " }}}

  " キーマッピング {{{
  " git-status
  nnoremap <silent> [git]s :<C-u>Gstatus<CR>
  " git-diff
  nnoremap <silent> [git]d :<C-u>Gvdiff<CR>
  " }}}
endif
" }}}

" agit {{{
if neobundle#tap('agit.vim')
  " キーマッピング {{{
  nnoremap <silent> [git]a :<C-u>Agit<CR>
  " }}}
endif
" }}}

" Merginal {{{
if neobundle#tap('vim-merginal')
  " キーマッピング {{{
  nnoremap <silent> [git]m :<C-u>Merginal<CR>
  " }}}
endif
" }}}
" }}}

" vimshell {{{
if neobundle#tap('vimshell')
  " config {{{
  call neobundle#config({
        \   'autoload': {
        \     'commands': [
        \       {
        \         'name': 'VimShell',
        \         'complete': 'customlist,vimshell#complete',
        \       },
        \       'VimShellExecute',
        \       'VimShellPop',
        \     ],
        \     'mappings': [
        \       '<Plug>(vimshell_switch)'
        \     ],
        \   },
        \ })
  " }}}
endif
" }}}

" eskk {{{
if neobundle#tap('eskk.vim')
  " settings {{{
  let g:eskk#directory = '~/.skk'
  if has('gui_running')
    set imdisable
  endif
  if has('vim_starting')
    if neobundle#tap('neocomplete.vim')
      let g:eskk#enable_completion=1
    endif
    let g:eskk#dictionary = {
          \   'path': '~/.skk/skk-jisyo.user',
          \   'sorted': 0,
          \   'encoding': 'utf-8',
          \ }
    let g:eskk#large_dictionary = {
          \   'path': '~/.skk/SKK-JISYO.L',
          \   'sorted': 1,
          \   'encoding': 'euc-jp',
          \ }
  endif
  " }}}
endif
" }}}

" vim-unified-diff {{{
if neobundle#tap('vim-unified-diff')
  " settings {{{
  set diffexpr=unified_diff#diffexpr()

  " configure with the flllowings (default values are shown below)
  "let unified_diff#executable = 'git'
  "let unified_diff#arguments = [
  "  \   'diff', '--no-index', '--no-color', '--no-ext-diff', '--unified=0',
  "  \ ]
  "let unified_diff#iwhite_arguments = [
  "  \   '--ignore--all-space',
  "  \ ]
  let unified_diff#iwhite_arguments = [] " スペースの変化も表示対象にする TODO できていないぽい
  " }}}
endif

" }}}

" syntastic {{{
if neobundle#tap('syntastic')
  " config {{{
  call neobundle#config({
        \   'autoload': {
        \     'insert': 1,
        \     'commands': [
        \       'Errors',
        \     ]
        \   }
        \ })
  " }}}

  " on_source {{{
  function! neobundle#tapped.hooks.on_source(bundle) abort
    if neobundle#is_sourced(a:bundle.name)
      " ステータスラインに表示を追加
      set statusline+=\  " 空白スペース
      set statusline+=%#warningmsg#
      set statusline+=%{exists('*SyntasticStatuslineFlag')?SyntasticStatuslineFlag():''} " syntasticによるチェック結果
      set statusline+=%*
    endif
  endfunction
  " }}}

  " settings {{{
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 1
  " }}}
endif
" }}}

" nebula {{{
if neobundle#tap('nebula.vim')
  " config {{{
  call neobundle#config({
        \   'autoload': {
        \     'filetypes': [
        \       'vim',
        \     ],
        \   },
        \ })
  " }}}

  " on_source {{{
  function! neobundle#tapped.hooks.on_source(bundle) abort
    if neobundle#is_sourced(a:bundle.name)
      " prefix定義
      nnoremap [nebula] <Nop>
      nmap <Leader>n [nebula]

      nnoremap <silent> [nebula]l :<C-u>NebulaPutLazy<CR>
      nnoremap <silent> [nebula]c :<C-u>NebulaPutConfig<CR>
      nnoremap <silent> [nebula]y :<C-u>NebulaYankOptions<CR>
      nnoremap <silent> [nebula]p :<C-u>NebulaPutFromClipboard<CR>
    endif
  endfunction
  " }}}
endif
" }}}

" vim-scala {{{
if neobundle#tap('vim-scala')
  " config {{{
  call neobundle#config({
        \   'autoload': {
        \     'filetypes': [
        \       'sbt.scala',
        \       'scala',
        \     ]
        \   }
        \ })
  " }}}

  " settings {{{
  " ftdetectが読み込まれないので、ここで読んでしまう
  augroup vim_scala
    autocmd!
    source ~/.vim/bundle/vim-scala/ftdetect/scala.vim
  augroup END

  " }}}
endif
" }}}

" vim-less {{{
if neobundle#tap('vim-less')
  " config {{{
  call neobundle#config({
        \   'autoload': {
        \     'filetypes': [
        \       'less',
        \     ]
        \   }
        \ })
  " }}}

  " settings {{{
  " ftdetectが読み込まれないので、ここで読んでしまう
  augroup vim_less
    autocmd!
    source ~/.vim/bundle/vim-less/ftdetect/less.vim
  augroup END

  " }}}
endif
" }}}

" vim-coffee-script {{{
if neobundle#tap('vim-coffee-script')
  " config {{{
  call neobundle#config({
        \   'autoload': {
        \     'filetypes': [
        \       'coffee',
        \     ]
        \   }
        \ })
  " }}}

  " settings {{{
  " ftdetectが読み込まれないので、ここで読んでしまう
  augroup vim_less
    autocmd!
    source ~/.vim/bundle/vim-coffee-script/ftdetect/coffee.vim
  augroup END

  " }}}
endif
" }}}

" vim-vimlint {{{
if neobundle#tap('vim-vimlint')
  " config {{{
  call neobundle#config({
        \   'autoload': {
        \     'functions': [
        \       'vimlint#vimlint',
        \     ],
        \     'on_source': [
        \       'syntastic',
        \     ],
        \   },
        \ })
  " }}}
endif
" }}}

" }}}

" 表示設定 {{{
if has('unix')
  " Linuxで文字化けするので、Linuxならtermencodingをutf-8にする（kaoriya vimrcではcp932になる？）
  set termencoding=utf-8
  set encoding=utf-8
endif

" シンタックスハイライト
syntax enable

" カラーテーマ
set background=dark
if neobundle#tap('vim-colors-solarized')
  colorscheme solarized
endif

" 行番号を表示
set number

" ルーラーを表示
set ruler

" タブや改行を表示
set list
set listchars=tab:>>,extends:<,trail:>
"if has('win32')
"  set listchars=tab:>>,extends:<,trail:>
"else
"  set listchars=tab:≫\ ,extends:≪,trail:≫
"endif

" 画面上でのタブ幅
set tabstop=4
" ↓これをやらないとインデントが余分に入る
set shiftwidth=4
" 改行しない
set nowrap
" 自動折り返しなし
set tw=0

" ステータスラインの表示
set statusline=%< " 行が長すぎるときに切り詰める位置
set statusline+=[%n] " バッファ番号
set statusline+=%m " 修正フラグ
set statusline+=%r " 読み込み専用フラグ
set statusline+=%h " ヘルプバッファフラグ
set statusline+=%w " プレビューウィンドウフラグ
set statusline+=[
set statusline+=%{has('multi_byte')&&\&fileencoding!=''?&fileencoding:&encoding} " 文字コードを表示
set statusline+=:
set statusline+=%{&fileformat} " ファイルタイプ表示
set statusline+=]
set statusline+=%y " バッファ内のファイルタイプ
set statusline+=\  " 空白スペース
set statusline+=%<%F " バッファ内のファイルのフルパス
set statusline+=%= " 左寄せ項目と右寄せ項目の区切り
if neobundle#tap('eskk.vim')
  set statusline+=%{exists('*eskk#statusline')?eskk#statusline():''} " eskkの状態を表示
endif
if neobundle#tap('vim-fugitive')
  set statusline+=%{exists('*fugitive#statusline')?fugitive#statusline():''} " Gitのブランチ名を表示
endif
set statusline+=\ \  " 空白スペース2個
set statusline+=%1l " 何行目にカーソルがあるか
set statusline+=/
set statusline+=%L " バッファ内の総行数
" set statusline+=,
" set statusline+=%c " 何列目にカーソルがあるか
" set statusline+=%V " 画面上の何列目にカーソルがあるか
set statusline+=\ \  " 空白スペース2個
set statusline+=%P " ファイル内の何%の位置にあるか

" 入力モード時にステータスラインの色を変える
augroup InsertHook
  autocmd!
  autocmd InsertEnter * highlight StatusLine guifg=#CCDC90 guibg=#2E4340
  autocmd InsertLeave * highlight StatusLine guifg=#2E4340 guibg=#CCDC90
augroup END

" カーソル行をハイライト
set cursorline
augroup cch
  autocmd!
  autocmd WinLeave * set nocursorline
  autocmd WinEnter,BufRead * set cursorline
augroup END
:hi clear CursorLine
:hi CursorLine gui=underline
hi CursorLine ctermbg=black guibg=black

" vimdiffの色設定
highlight DiffAdd cterm=bold ctermfg=10 ctermbg=22
highlight DiffDelete cterm=bold ctermfg=10 ctermbg=52
highlight DiffChange cterm=bold ctermfg=10 ctermbg=17
highlight DiffText cterm=bold ctermfg=10 ctermbg=21

" }}}

" ファイル操作設定 {{{
" バックアップファイルを作成する
set backup

" バックアップファイルの作成場所
set backupdir=$HOME/.vim/.backup
" スワップファイルの作成場所
set directory=$HOME/.vim/.backup
" undoファイル（.*.un~）の作成場所
set undodir=$HOME/.vim/.backup

" 編集中でも他のファイルを開けるように
set hidden

" 保存時に行末の空白を除去
augroup del_end_ws
  autocmd!
  autocmd BufWritePre * :%s/\s\+$//ge
augroup END

" }}}

" ファイルタイプ設定 {{{

" PHP {{{
let g:php_sql_query = 1
let g:php_baselib = 1
let g:php_htmlInStrings = 1
let g:php_noShortTags = 1
let g:php_folding = 1

" DBをMySQLにする（シンタックスハイライトがきく？）
let g:sql_type_default='mysql'
" }}}
" }}}

" その他の設定 {{{
" クリップボードを共有
if has('unix')
  set clipboard=unnamedplus
else
  set clipboard=unnamed
endif

" □とか○の文字があってもカーソル位置がずれないようにする
if exists('&ambiwidth')
  set ambiwidth=double
endif

" Ctrl+a,Ctrl+xでインクリメント、デクリメントするときに、先頭に
" 0詰めされた 001 などを8進数ではなく普通の数字とみなす
set nf=""

" }}}

" プラグイン非依存のキーマッピング {{{

" ESC連打でハイライトを消す
nmap <silent> <Esc><Esc> :nohlsearch<CR><Esc>

" 検索語が画面中央に来るようにする
nmap n nzz
nmap N Nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz

" 表示行で移動
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" コマンドラインで日付・タイムスタンプを補完
cnoremap <expr> <C-X>dt strftime('%Y%m%d')
cnoremap <expr> <C-X>ts strftime('%Y%m%D%H%M%S')

" 改行の時に括弧を自動で閉じる
inoremap <expr><CR> <SID>ExCr()
function! s:ExCr()
  if col('.') != col('$')
    return "\<CR>"
  endif

  let l = getline('.')
  if l =~ '{$'
    return "\<CR>}\<Up>\<End>\<CR>"
  elseif l =~ '($'
    return "\<CR>)\<Up>\<End>\<CR>"
  elseif l =~ '[$'
    return "\<CR>]\<Up>\<End>\<CR>"
  else
    return "\<CR>"
  endif
endfunction

" visualモードで連続ペースト
vnoremap <silent> <C-p> "0p<CR>

" vimrcを開く
nnoremap <silent> <Leader>ev :<C-u>edit <C-r>=resolve(expand($MYVIMRC))<CR><CR>
" vimrcをリロード
nnoremap <silent> <Leader>rv :<C-u>source $MYVIMRC<CR>
" gvimrcを開く
nnoremap <silent> <Leader>eg :<C-u>edit <C-r>=resolve(expand($MYGVIMRC))<CR><CR>
" gvimrcをリロード
nnoremap <silent> <Leader>rg :<C-u>source $MYGVIMRC<CR>

" }}}
